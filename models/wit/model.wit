

interface model {
  type model-name = string;
  type adapter-name = string;
  type domain-name = string;
  type port-name = string;
  type relation-name = string;
  type workflow-name = string;
  type datasource-name = string;

  record port-event {
    name: string,
    wfid: workflow-name,
    wfstate: string
  }

  enum direction {
    inbound,
    outbound
  }

  record port {
    name: port-name,
    adapters: list<adapter-name>,
    direction: direction,
    consumes: list<port-event>,
    produces: list<port-event>,
    callback: port-name,
    enabled: bool,
    timeout: s32,
    retry: s32,
    interval: s32,
    circuit-breaker: bool,
    retest: s32,
    undo: port-name,
  }

  enum cardinalities {
    one-to-many,
    many-to-one,
    one-to-one,
    many-to-many
  }

  record relation {
    name: relation-name,
    domain: domain-name,
    related-model: model-name,
    cardinality: cardinalities,
    foreign-key: string,
    local-only: bool,
    keep-remote: bool,
    desc: string
  }

  record datasource {
    name: datasource-name,
    schema: string
  }

  record model-spec {
    name: model-name,
    domain: domain-name,
    ports: list<port>,
    relations: list<relation>,
    datasource: datasource,
    cache-enabled: bool,
  }

  variant spec-error {
    spec-not-found(string),
    spec-invalid(string),
  }

  get-spec: func() -> result<model-spec, spec-error>;
}

interface model-data {
  use model.{model-name, domain-name};
  
  variant primitive {
    u8-type(u8),
    u16-type(u16),
    u32-type(u32),
    u64-type(u64),
    s8-type(s8),
    s16-type(s16),
    s32-type(s32),
    s64-type(s64),
    char-type(char),
    string-type(string)
  }
 
  record model-instance {
    uuid: string,
    model: model-name,
    domain: domain-name,
    data: list<u8>
  }
}



