// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod taho {
        pub mod models {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod model {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type ModelName = _rt::String;
                pub type AdapterName = _rt::String;
                pub type DomainName = _rt::String;
                pub type PortName = _rt::String;
                pub type RelationName = _rt::String;
                pub type WorkflowName = _rt::String;
                pub type DatasourceName = _rt::String;
                #[derive(Clone)]
                pub struct PortEvent {
                    pub name: _rt::String,
                    pub wfid: WorkflowName,
                    pub wfstate: _rt::String,
                }
                impl ::core::fmt::Debug for PortEvent {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("PortEvent")
                            .field("name", &self.name)
                            .field("wfid", &self.wfid)
                            .field("wfstate", &self.wfstate)
                            .finish()
                    }
                }
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
                pub enum Direction {
                    Inbound,
                    Outbound,
                }
                impl ::core::fmt::Debug for Direction {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            Direction::Inbound => {
                                f.debug_tuple("Direction::Inbound").finish()
                            }
                            Direction::Outbound => {
                                f.debug_tuple("Direction::Outbound").finish()
                            }
                        }
                    }
                }
                impl Direction {
                    #[doc(hidden)]
                    pub unsafe fn _lift(val: u8) -> Direction {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }
                        match val {
                            0 => Direction::Inbound,
                            1 => Direction::Outbound,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }
                #[derive(Clone)]
                pub struct Port {
                    pub name: PortName,
                    pub adapters: _rt::Vec<AdapterName>,
                    pub direction: Direction,
                    pub consumes: _rt::Vec<PortEvent>,
                    pub produces: _rt::Vec<PortEvent>,
                    pub callback: PortName,
                    pub enabled: bool,
                    pub timeout: i32,
                    pub retry: i32,
                    pub interval: i32,
                    pub circuit_breaker: bool,
                    pub retest: i32,
                    pub undo: PortName,
                }
                impl ::core::fmt::Debug for Port {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Port")
                            .field("name", &self.name)
                            .field("adapters", &self.adapters)
                            .field("direction", &self.direction)
                            .field("consumes", &self.consumes)
                            .field("produces", &self.produces)
                            .field("callback", &self.callback)
                            .field("enabled", &self.enabled)
                            .field("timeout", &self.timeout)
                            .field("retry", &self.retry)
                            .field("interval", &self.interval)
                            .field("circuit-breaker", &self.circuit_breaker)
                            .field("retest", &self.retest)
                            .field("undo", &self.undo)
                            .finish()
                    }
                }
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
                pub enum Cardinalities {
                    OneToMany,
                    ManyToOne,
                    OneToOne,
                    ManyToMany,
                }
                impl ::core::fmt::Debug for Cardinalities {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            Cardinalities::OneToMany => {
                                f.debug_tuple("Cardinalities::OneToMany").finish()
                            }
                            Cardinalities::ManyToOne => {
                                f.debug_tuple("Cardinalities::ManyToOne").finish()
                            }
                            Cardinalities::OneToOne => {
                                f.debug_tuple("Cardinalities::OneToOne").finish()
                            }
                            Cardinalities::ManyToMany => {
                                f.debug_tuple("Cardinalities::ManyToMany").finish()
                            }
                        }
                    }
                }
                impl Cardinalities {
                    #[doc(hidden)]
                    pub unsafe fn _lift(val: u8) -> Cardinalities {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }
                        match val {
                            0 => Cardinalities::OneToMany,
                            1 => Cardinalities::ManyToOne,
                            2 => Cardinalities::OneToOne,
                            3 => Cardinalities::ManyToMany,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }
                #[derive(Clone)]
                pub struct Relation {
                    pub name: RelationName,
                    pub domain: DomainName,
                    pub related_model: ModelName,
                    pub cardinality: Cardinalities,
                    pub foreign_key: _rt::String,
                    pub local_only: bool,
                    pub keep_remote: bool,
                    pub desc: _rt::String,
                }
                impl ::core::fmt::Debug for Relation {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Relation")
                            .field("name", &self.name)
                            .field("domain", &self.domain)
                            .field("related-model", &self.related_model)
                            .field("cardinality", &self.cardinality)
                            .field("foreign-key", &self.foreign_key)
                            .field("local-only", &self.local_only)
                            .field("keep-remote", &self.keep_remote)
                            .field("desc", &self.desc)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct Datasource {
                    pub name: DatasourceName,
                    pub schema: _rt::String,
                }
                impl ::core::fmt::Debug for Datasource {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Datasource")
                            .field("name", &self.name)
                            .field("schema", &self.schema)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct ModelSpec {
                    pub name: ModelName,
                    pub domain: DomainName,
                    pub ports: _rt::Vec<Port>,
                    pub relations: _rt::Vec<Relation>,
                    pub datasource: Datasource,
                    pub cache_enabled: bool,
                }
                impl ::core::fmt::Debug for ModelSpec {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("ModelSpec")
                            .field("name", &self.name)
                            .field("domain", &self.domain)
                            .field("ports", &self.ports)
                            .field("relations", &self.relations)
                            .field("datasource", &self.datasource)
                            .field("cache-enabled", &self.cache_enabled)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub enum SpecError {
                    SpecNotFound(_rt::String),
                    SpecInvalid(_rt::String),
                }
                impl ::core::fmt::Debug for SpecError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            SpecError::SpecNotFound(e) => {
                                f.debug_tuple("SpecError::SpecNotFound").field(e).finish()
                            }
                            SpecError::SpecInvalid(e) => {
                                f.debug_tuple("SpecError::SpecInvalid").field(e).finish()
                            }
                        }
                    }
                }
                impl ::core::fmt::Display for SpecError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        write!(f, "{:?}", self)
                    }
                }
                impl std::error::Error for SpecError {}
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_spec_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_spec();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let ModelSpec {
                                name: name2,
                                domain: domain2,
                                ports: ports2,
                                relations: relations2,
                                datasource: datasource2,
                                cache_enabled: cache_enabled2,
                            } = e;
                            let vec3 = (name2.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr1
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *ptr1
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr3.cast_mut();
                            let vec4 = (domain2.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr1
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *ptr1
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                            let vec21 = ports2;
                            let len21 = vec21.len();
                            let layout21 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec21.len()
                                    * (24 + 13 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result21 = if layout21.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout21).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout21);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec21.into_iter().enumerate() {
                                let base = result21
                                    .add(i * (24 + 13 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let Port {
                                        name: name5,
                                        adapters: adapters5,
                                        direction: direction5,
                                        consumes: consumes5,
                                        produces: produces5,
                                        callback: callback5,
                                        enabled: enabled5,
                                        timeout: timeout5,
                                        retry: retry5,
                                        interval: interval5,
                                        circuit_breaker: circuit_breaker5,
                                        retest: retest5,
                                        undo: undo5,
                                    } = e;
                                    let vec6 = (name5.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                                    let vec8 = adapters5;
                                    let len8 = vec8.len();
                                    let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec8.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result8 = if layout8.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout8);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec8.into_iter().enumerate() {
                                        let base = result8
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let vec7 = (e.into_bytes()).into_boxed_slice();
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            ::core::mem::forget(vec7);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len7;
                                            *base.add(0).cast::<*mut u8>() = ptr7.cast_mut();
                                        }
                                    }
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result8;
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (direction5.clone() as i32) as u8;
                                    let vec13 = consumes5;
                                    let len13 = vec13.len();
                                    let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec13.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result13 = if layout13.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout13);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec13.into_iter().enumerate() {
                                        let base = result13
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let PortEvent {
                                                name: name9,
                                                wfid: wfid9,
                                                wfstate: wfstate9,
                                            } = e;
                                            let vec10 = (name9.into_bytes()).into_boxed_slice();
                                            let ptr10 = vec10.as_ptr().cast::<u8>();
                                            let len10 = vec10.len();
                                            ::core::mem::forget(vec10);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len10;
                                            *base.add(0).cast::<*mut u8>() = ptr10.cast_mut();
                                            let vec11 = (wfid9.into_bytes()).into_boxed_slice();
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            ::core::mem::forget(vec11);
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len11;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr11.cast_mut();
                                            let vec12 = (wfstate9.into_bytes()).into_boxed_slice();
                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                            let len12 = vec12.len();
                                            ::core::mem::forget(vec12);
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len12;
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr12.cast_mut();
                                        }
                                    }
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len13;
                                    *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result13;
                                    let vec18 = produces5;
                                    let len18 = vec18.len();
                                    let layout18 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec18.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result18 = if layout18.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout18).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout18);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec18.into_iter().enumerate() {
                                        let base = result18
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let PortEvent {
                                                name: name14,
                                                wfid: wfid14,
                                                wfstate: wfstate14,
                                            } = e;
                                            let vec15 = (name14.into_bytes()).into_boxed_slice();
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();
                                            ::core::mem::forget(vec15);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len15;
                                            *base.add(0).cast::<*mut u8>() = ptr15.cast_mut();
                                            let vec16 = (wfid14.into_bytes()).into_boxed_slice();
                                            let ptr16 = vec16.as_ptr().cast::<u8>();
                                            let len16 = vec16.len();
                                            ::core::mem::forget(vec16);
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len16;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr16.cast_mut();
                                            let vec17 = (wfstate14.into_bytes()).into_boxed_slice();
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            ::core::mem::forget(vec17);
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len17;
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr17.cast_mut();
                                        }
                                    }
                                    *base
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len18;
                                    *base
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result18;
                                    let vec19 = (callback5.into_bytes()).into_boxed_slice();
                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                    let len19 = vec19.len();
                                    ::core::mem::forget(vec19);
                                    *base
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len19;
                                    *base
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr19.cast_mut();
                                    *base
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match enabled5 {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                    *base
                                        .add(4 + 11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(timeout5);
                                    *base
                                        .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(retry5);
                                    *base
                                        .add(12 + 11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(interval5);
                                    *base
                                        .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match circuit_breaker5 {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                    *base
                                        .add(20 + 11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(retest5);
                                    let vec20 = (undo5.into_bytes()).into_boxed_slice();
                                    let ptr20 = vec20.as_ptr().cast::<u8>();
                                    let len20 = vec20.len();
                                    ::core::mem::forget(vec20);
                                    *base
                                        .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len20;
                                    *base
                                        .add(24 + 11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr20.cast_mut();
                                }
                            }
                            *ptr1
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len21;
                            *ptr1
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result21;
                            let vec28 = relations2;
                            let len28 = vec28.len();
                            let layout28 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec28.len() * (12 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result28 = if layout28.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout28).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout28);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec28.into_iter().enumerate() {
                                let base = result28
                                    .add(i * (12 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let Relation {
                                        name: name22,
                                        domain: domain22,
                                        related_model: related_model22,
                                        cardinality: cardinality22,
                                        foreign_key: foreign_key22,
                                        local_only: local_only22,
                                        keep_remote: keep_remote22,
                                        desc: desc22,
                                    } = e;
                                    let vec23 = (name22.into_bytes()).into_boxed_slice();
                                    let ptr23 = vec23.as_ptr().cast::<u8>();
                                    let len23 = vec23.len();
                                    ::core::mem::forget(vec23);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len23;
                                    *base.add(0).cast::<*mut u8>() = ptr23.cast_mut();
                                    let vec24 = (domain22.into_bytes()).into_boxed_slice();
                                    let ptr24 = vec24.as_ptr().cast::<u8>();
                                    let len24 = vec24.len();
                                    ::core::mem::forget(vec24);
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len24;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr24.cast_mut();
                                    let vec25 = (related_model22.into_bytes())
                                        .into_boxed_slice();
                                    let ptr25 = vec25.as_ptr().cast::<u8>();
                                    let len25 = vec25.len();
                                    ::core::mem::forget(vec25);
                                    *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len25;
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr25.cast_mut();
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (cardinality22.clone() as i32) as u8;
                                    let vec26 = (foreign_key22.into_bytes()).into_boxed_slice();
                                    let ptr26 = vec26.as_ptr().cast::<u8>();
                                    let len26 = vec26.len();
                                    ::core::mem::forget(vec26);
                                    *base
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len26;
                                    *base
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr26.cast_mut();
                                    *base
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match local_only22 {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                    *base
                                        .add(1 + 9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match keep_remote22 {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                    let vec27 = (desc22.into_bytes()).into_boxed_slice();
                                    let ptr27 = vec27.as_ptr().cast::<u8>();
                                    let len27 = vec27.len();
                                    ::core::mem::forget(vec27);
                                    *base
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len27;
                                    *base
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr27.cast_mut();
                                }
                            }
                            *ptr1
                                .add(8 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len28;
                            *ptr1
                                .add(7 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result28;
                            let Datasource { name: name29, schema: schema29 } = datasource2;
                            let vec30 = (name29.into_bytes()).into_boxed_slice();
                            let ptr30 = vec30.as_ptr().cast::<u8>();
                            let len30 = vec30.len();
                            ::core::mem::forget(vec30);
                            *ptr1
                                .add(10 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len30;
                            *ptr1
                                .add(9 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr30.cast_mut();
                            let vec31 = (schema29.into_bytes()).into_boxed_slice();
                            let ptr31 = vec31.as_ptr().cast::<u8>();
                            let len31 = vec31.len();
                            ::core::mem::forget(vec31);
                            *ptr1
                                .add(12 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len31;
                            *ptr1
                                .add(11 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr31.cast_mut();
                            *ptr1
                                .add(13 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (match cache_enabled2 {
                                true => 1,
                                false => 0,
                            }) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                SpecError::SpecNotFound(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec32 = (e.into_bytes()).into_boxed_slice();
                                    let ptr32 = vec32.as_ptr().cast::<u8>();
                                    let len32 = vec32.len();
                                    ::core::mem::forget(vec32);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len32;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr32.cast_mut();
                                }
                                SpecError::SpecInvalid(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec33 = (e.into_bytes()).into_boxed_slice();
                                    let ptr33 = vec33.as_ptr().cast::<u8>();
                                    let len33 = vec33.len();
                                    ::core::mem::forget(vec33);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len33;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr33.cast_mut();
                                }
                            }
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_spec<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = *arg0
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l4 = *arg0
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                            let l5 = *arg0
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *arg0
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base36 = l5;
                            let len36 = l6;
                            for i in 0..len36 {
                                let base = base36
                                    .add(i * (24 + 13 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l7 = *base.add(0).cast::<*mut u8>();
                                    let l8 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l7, l8, 1);
                                    let l9 = *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l10 = *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base13 = l9;
                                    let len13 = l10;
                                    for i in 0..len13 {
                                        let base = base13
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l11 = *base.add(0).cast::<*mut u8>();
                                            let l12 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l11, l12, 1);
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base13,
                                        len13 * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let l14 = *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l15 = *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base22 = l14;
                                    let len22 = l15;
                                    for i in 0..len22 {
                                        let base = base22
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l16 = *base.add(0).cast::<*mut u8>();
                                            let l17 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l16, l17, 1);
                                            let l18 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l19 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l18, l19, 1);
                                            let l20 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l21 = *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l20, l21, 1);
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base22,
                                        len22 * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let l23 = *base
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l24 = *base
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base31 = l23;
                                    let len31 = l24;
                                    for i in 0..len31 {
                                        let base = base31
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l25 = *base.add(0).cast::<*mut u8>();
                                            let l26 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l25, l26, 1);
                                            let l27 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l28 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l27, l28, 1);
                                            let l29 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l30 = *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l29, l30, 1);
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base31,
                                        len31 * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let l32 = *base
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l33 = *base
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l32, l33, 1);
                                    let l34 = *base
                                        .add(24 + 11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l35 = *base
                                        .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l34, l35, 1);
                                }
                            }
                            _rt::cabi_dealloc(
                                base36,
                                len36 * (24 + 13 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let l37 = *arg0
                                .add(7 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l38 = *arg0
                                .add(8 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base49 = l37;
                            let len49 = l38;
                            for i in 0..len49 {
                                let base = base49
                                    .add(i * (12 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l39 = *base.add(0).cast::<*mut u8>();
                                    let l40 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l39, l40, 1);
                                    let l41 = *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l42 = *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l41, l42, 1);
                                    let l43 = *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l44 = *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l43, l44, 1);
                                    let l45 = *base
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l46 = *base
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l45, l46, 1);
                                    let l47 = *base
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l48 = *base
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l47, l48, 1);
                                }
                            }
                            _rt::cabi_dealloc(
                                base49,
                                len49 * (12 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let l50 = *arg0
                                .add(9 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l51 = *arg0
                                .add(10 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l50, l51, 1);
                            let l52 = *arg0
                                .add(11 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l53 = *arg0
                                .add(12 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l52, l53, 1);
                        }
                        _ => {
                            let l54 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l54 {
                                0 => {
                                    let l55 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l56 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l55, l56, 1);
                                }
                                _ => {
                                    let l57 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l58 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l57, l58, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    fn get_spec() -> Result<ModelSpec, SpecError>;
                }
                #[doc(hidden)]
                macro_rules! __export_taho_models_model_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "taho:models/model#get-spec")] unsafe extern "C" fn
                        export_get_spec() -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_get_spec_cabi::<$ty > () } } #[unsafe (export_name =
                        "cabi_post_taho:models/model#get-spec")] unsafe extern "C" fn
                        _post_return_get_spec(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_get_spec::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_taho_models_model_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 14 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 14
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod model_data {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                #[doc(hidden)]
                macro_rules! __export_taho_models_model_data_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = {};
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_taho_models_model_data_cabi;
            }
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod port {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[derive(Clone)]
                pub enum PortError {
                    Error(_rt::String),
                }
                impl ::core::fmt::Debug for PortError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            PortError::Error(e) => {
                                f.debug_tuple("PortError::Error").field(e).finish()
                            }
                        }
                    }
                }
                impl ::core::fmt::Display for PortError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        write!(f, "{:?}", self)
                    }
                }
                impl std::error::Error for PortError {}
                #[derive(Clone)]
                pub struct PortData {
                    pub data: _rt::Vec<u8>,
                    pub wfid: _rt::String,
                    pub wfstate: _rt::String,
                    pub wfhist: _rt::Vec<_rt::String>,
                }
                impl ::core::fmt::Debug for PortData {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("PortData")
                            .field("data", &self.data)
                            .field("wfid", &self.wfid)
                            .field("wfstate", &self.wfstate)
                            .field("wfhist", &self.wfhist)
                            .finish()
                    }
                }
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Ports {
                    handle: _rt::Resource<Ports>,
                }
                type _PortsRep<T> = Option<T>;
                impl Ports {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Ports`.
                    pub fn new<T: GuestPorts>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _PortsRep<T> = Some(val);
                        let ptr: *mut _PortsRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestPorts>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestPorts>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestPorts>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _PortsRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestPorts>(&self) -> *mut _PortsRep<T> {
                        Ports::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Ports`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct PortsBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Ports>,
                }
                impl<'a> PortsBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestPorts>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _PortsRep<T> {
                        Ports::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Ports {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]taho:models/port")]
                            unsafe extern "C" {
                                #[link_name = "[resource-drop]ports"]
                                fn drop(_: u32);
                            }
                            unsafe { drop(_handle) };
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_ports_cabi<T: GuestPorts>() -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = Ports::new(T::new());
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_ports_invoke_port_cabi<T: GuestPorts>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: *mut u8,
                    arg6: usize,
                    arg7: *mut u8,
                    arg8: usize,
                    arg9: *mut u8,
                    arg10: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let len1 = arg4;
                    let len2 = arg6;
                    let bytes2 = _rt::Vec::from_raw_parts(arg5.cast(), len2, len2);
                    let len3 = arg8;
                    let bytes3 = _rt::Vec::from_raw_parts(arg7.cast(), len3, len3);
                    let base7 = arg9;
                    let len7 = arg10;
                    let mut result7 = _rt::Vec::with_capacity(len7);
                    for i in 0..len7 {
                        let base = base7
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        let e7 = {
                            let l4 = *base.add(0).cast::<*mut u8>();
                            let l5 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len6 = l5;
                            let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                            _rt::string_lift(bytes6)
                        };
                        result7.push(e7);
                    }
                    _rt::cabi_dealloc(
                        base7,
                        len7 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result8 = T::invoke_port(
                        unsafe { PortsBorrow::lift(arg0 as u32 as usize) }.get(),
                        _rt::string_lift(bytes0),
                        PortData {
                            data: _rt::Vec::from_raw_parts(arg3.cast(), len1, len1),
                            wfid: _rt::string_lift(bytes2),
                            wfstate: _rt::string_lift(bytes3),
                            wfhist: result7,
                        },
                    );
                    let ptr9 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result8 {
                        Ok(e) => {
                            *ptr9.add(0).cast::<u8>() = (0i32) as u8;
                            let PortData {
                                data: data10,
                                wfid: wfid10,
                                wfstate: wfstate10,
                                wfhist: wfhist10,
                            } = e;
                            let vec11 = (data10).into_boxed_slice();
                            let ptr11 = vec11.as_ptr().cast::<u8>();
                            let len11 = vec11.len();
                            ::core::mem::forget(vec11);
                            *ptr9
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len11;
                            *ptr9
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr11.cast_mut();
                            let vec12 = (wfid10.into_bytes()).into_boxed_slice();
                            let ptr12 = vec12.as_ptr().cast::<u8>();
                            let len12 = vec12.len();
                            ::core::mem::forget(vec12);
                            *ptr9
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len12;
                            *ptr9
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr12.cast_mut();
                            let vec13 = (wfstate10.into_bytes()).into_boxed_slice();
                            let ptr13 = vec13.as_ptr().cast::<u8>();
                            let len13 = vec13.len();
                            ::core::mem::forget(vec13);
                            *ptr9
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len13;
                            *ptr9
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr13.cast_mut();
                            let vec15 = wfhist10;
                            let len15 = vec15.len();
                            let layout15 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec15.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result15 = if layout15.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout15).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout15);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec15.into_iter().enumerate() {
                                let base = result15
                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let vec14 = (e.into_bytes()).into_boxed_slice();
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    ::core::mem::forget(vec14);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *base.add(0).cast::<*mut u8>() = ptr14.cast_mut();
                                }
                            }
                            *ptr9
                                .add(8 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len15;
                            *ptr9
                                .add(7 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result15;
                        }
                        Err(e) => {
                            *ptr9.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                PortError::Error(e) => {
                                    *ptr9
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec16 = (e.into_bytes()).into_boxed_slice();
                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                    let len16 = vec16.len();
                                    ::core::mem::forget(vec16);
                                    *ptr9
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len16;
                                    *ptr9
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr16.cast_mut();
                                }
                            }
                        }
                    };
                    ptr9
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_ports_invoke_port<T: GuestPorts>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base3 = l1;
                            let len3 = l2;
                            _rt::cabi_dealloc(base3, len3 * 1, 1);
                            let l4 = *arg0
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l5 = *arg0
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l4, l5, 1);
                            let l6 = *arg0
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l7 = *arg0
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l6, l7, 1);
                            let l8 = *arg0
                                .add(7 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l9 = *arg0
                                .add(8 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base12 = l8;
                            let len12 = l9;
                            for i in 0..len12 {
                                let base = base12
                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l10 = *base.add(0).cast::<*mut u8>();
                                    let l11 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                            }
                            _rt::cabi_dealloc(
                                base12,
                                len12 * (2 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                        }
                        _ => {
                            let l13 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l13 {
                                _ => {
                                    let l14 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l15 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    type Ports: GuestPorts;
                }
                pub trait GuestPorts: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]taho:models/port")]
                            unsafe extern "C" {
                                #[link_name = "[resource-new]ports"]
                                fn new(_: *mut u8) -> u32;
                            }
                            unsafe { new(val) }
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]taho:models/port")]
                            unsafe extern "C" {
                                #[link_name = "[resource-rep]ports"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    fn new() -> Self;
                    fn invoke_port(
                        &self,
                        name: _rt::String,
                        data: PortData,
                    ) -> Result<PortData, PortError>;
                }
                #[doc(hidden)]
                macro_rules! __export_taho_models_port_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "taho:models/port#[constructor]ports")] unsafe extern "C" fn
                        export_constructor_ports() -> i32 { unsafe { $($path_to_types)*::
                        _export_constructor_ports_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Ports > () } } #[unsafe (export_name =
                        "taho:models/port#[method]ports.invoke-port")] unsafe extern "C"
                        fn export_method_ports_invoke_port(arg0 : * mut u8, arg1 : * mut
                        u8, arg2 : usize, arg3 : * mut u8, arg4 : usize, arg5 : * mut u8,
                        arg6 : usize, arg7 : * mut u8, arg8 : usize, arg9 : * mut u8,
                        arg10 : usize,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_method_ports_invoke_port_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Ports > (arg0, arg1, arg2, arg3,
                        arg4, arg5, arg6, arg7, arg8, arg9, arg10) } } #[unsafe
                        (export_name =
                        "cabi_post_taho:models/port#[method]ports.invoke-port")] unsafe
                        extern "C" fn _post_return_method_ports_invoke_port(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_method_ports_invoke_port::<<$ty as
                        $($path_to_types)*:: Guest >::Ports > (arg0) } } const _ : () = {
                        #[doc(hidden)] #[unsafe (export_name =
                        "taho:models/port#[dtor]ports")] #[allow(non_snake_case)] unsafe
                        extern "C" fn dtor(rep : * mut u8) { unsafe {
                        $($path_to_types)*:: Ports::dtor::< <$ty as $($path_to_types)*::
                        Guest >::Ports > (rep) } } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_taho_models_port_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 9 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 9
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod crud {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type KeyValue = Option<_rt::Vec<(_rt::String, _rt::String)>>;
                #[derive(Clone)]
                pub enum CrudError {
                    Error(_rt::String),
                }
                impl ::core::fmt::Debug for CrudError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            CrudError::Error(e) => {
                                f.debug_tuple("CrudError::Error").field(e).finish()
                            }
                        }
                    }
                }
                impl ::core::fmt::Display for CrudError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        write!(f, "{:?}", self)
                    }
                }
                impl std::error::Error for CrudError {}
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct CrudApi {
                    handle: _rt::Resource<CrudApi>,
                }
                type _CrudApiRep<T> = Option<T>;
                impl CrudApi {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `CrudApi`.
                    pub fn new<T: GuestCrudApi>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _CrudApiRep<T> = Some(val);
                        let ptr: *mut _CrudApiRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestCrudApi>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestCrudApi>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestCrudApi>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _CrudApiRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestCrudApi>(&self) -> *mut _CrudApiRep<T> {
                        CrudApi::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`CrudApi`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct CrudApiBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a CrudApi>,
                }
                impl<'a> CrudApiBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestCrudApi>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _CrudApiRep<T> {
                        CrudApi::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for CrudApi {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]taho:models/crud")]
                            unsafe extern "C" {
                                #[link_name = "[resource-drop]crud-api"]
                                fn drop(_: u32);
                            }
                            unsafe { drop(_handle) };
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_crud_api_cabi<T: GuestCrudApi>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result7 = CrudApi::new(
                        T::new(
                            match arg0 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let base6 = arg1;
                                        let len6 = arg2;
                                        let mut result6 = _rt::Vec::with_capacity(len6);
                                        for i in 0..len6 {
                                            let base = base6
                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                            let e6 = {
                                                let l0 = *base.add(0).cast::<*mut u8>();
                                                let l1 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len2 = l1;
                                                let bytes2 = _rt::Vec::from_raw_parts(
                                                    l0.cast(),
                                                    len2,
                                                    len2,
                                                );
                                                let l3 = *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l4 = *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 = _rt::Vec::from_raw_parts(
                                                    l3.cast(),
                                                    len5,
                                                    len5,
                                                );
                                                (_rt::string_lift(bytes2), _rt::string_lift(bytes5))
                                            };
                                            result6.push(e6);
                                        }
                                        _rt::cabi_dealloc(
                                            base6,
                                            len6 * (4 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        result6
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        ),
                    );
                    (result7).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_crud_api_create_cabi<T: GuestCrudApi>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let len1 = arg4;
                    let result2 = T::create(
                        unsafe { CrudApiBorrow::lift(arg0 as u32 as usize) }.get(),
                        _rt::string_lift(bytes0),
                        _rt::Vec::from_raw_parts(arg3.cast(), len1, len1),
                    );
                    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result2 {
                        Ok(e) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                            let vec4 = (e).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr3
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *ptr3
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                CrudError::Error(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                            }
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_crud_api_create<T: GuestCrudApi>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base3 = l1;
                            let len3 = l2;
                            _rt::cabi_dealloc(base3, len3 * 1, 1);
                        }
                        _ => {
                            let l4 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l4 {
                                _ => {
                                    let l5 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l6 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l5, l6, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_crud_api_read_cabi<T: GuestCrudApi>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::read(
                        unsafe { CrudApiBorrow::lift(arg0 as u32 as usize) }.get(),
                        _rt::string_lift(bytes0),
                    );
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            let vec3 = (e).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *ptr2
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr3.cast_mut();
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                CrudError::Error(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr4.cast_mut();
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_crud_api_read<T: GuestCrudApi>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base3 = l1;
                            let len3 = l2;
                            _rt::cabi_dealloc(base3, len3 * 1, 1);
                        }
                        _ => {
                            let l4 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l4 {
                                _ => {
                                    let l5 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l6 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l5, l6, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_crud_api_update_cabi<T: GuestCrudApi>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let len1 = arg4;
                    let result2 = T::update(
                        unsafe { CrudApiBorrow::lift(arg0 as u32 as usize) }.get(),
                        _rt::string_lift(bytes0),
                        _rt::Vec::from_raw_parts(arg3.cast(), len1, len1),
                    );
                    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result2 {
                        Ok(e) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr3
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<i32>() = _rt::as_i32(e);
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                CrudError::Error(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr4.cast_mut();
                                }
                            }
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_crud_api_update<T: GuestCrudApi>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_crud_api_delete_cabi<T: GuestCrudApi>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::delete(
                        unsafe { CrudApiBorrow::lift(arg0 as u32 as usize) }.get(),
                        _rt::string_lift(bytes0),
                    );
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr2
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<i32>() = _rt::as_i32(e);
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                CrudError::Error(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec3 = (e.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len3;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr3.cast_mut();
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_crud_api_delete<T: GuestCrudApi>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    type CrudApi: GuestCrudApi;
                }
                pub trait GuestCrudApi: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]taho:models/crud")]
                            unsafe extern "C" {
                                #[link_name = "[resource-new]crud-api"]
                                fn new(_: *mut u8) -> u32;
                            }
                            unsafe { new(val) }
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]taho:models/crud")]
                            unsafe extern "C" {
                                #[link_name = "[resource-rep]crud-api"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    fn new(config: KeyValue) -> Self;
                    fn create(
                        &self,
                        query: _rt::String,
                        data: _rt::Vec<u8>,
                    ) -> Result<_rt::Vec<u8>, CrudError>;
                    fn read(
                        &self,
                        query: _rt::String,
                    ) -> Result<_rt::Vec<u8>, CrudError>;
                    fn update(
                        &self,
                        query: _rt::String,
                        data: _rt::Vec<u8>,
                    ) -> Result<i32, CrudError>;
                    fn delete(&self, query: _rt::String) -> Result<i32, CrudError>;
                }
                #[doc(hidden)]
                macro_rules! __export_taho_models_crud_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "taho:models/crud#[constructor]crud-api")] unsafe extern "C" fn
                        export_constructor_crud_api(arg0 : i32, arg1 : * mut u8, arg2 :
                        usize,) -> i32 { unsafe { $($path_to_types)*::
                        _export_constructor_crud_api_cabi::<<$ty as $($path_to_types)*::
                        Guest >::CrudApi > (arg0, arg1, arg2) } } #[unsafe (export_name =
                        "taho:models/crud#[method]crud-api.create")] unsafe extern "C" fn
                        export_method_crud_api_create(arg0 : * mut u8, arg1 : * mut u8,
                        arg2 : usize, arg3 : * mut u8, arg4 : usize,) -> * mut u8 {
                        unsafe { $($path_to_types)*::
                        _export_method_crud_api_create_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::CrudApi > (arg0, arg1, arg2, arg3,
                        arg4) } } #[unsafe (export_name =
                        "cabi_post_taho:models/crud#[method]crud-api.create")] unsafe
                        extern "C" fn _post_return_method_crud_api_create(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_method_crud_api_create::<<$ty as
                        $($path_to_types)*:: Guest >::CrudApi > (arg0) } } #[unsafe
                        (export_name = "taho:models/crud#[method]crud-api.read")] unsafe
                        extern "C" fn export_method_crud_api_read(arg0 : * mut u8, arg1 :
                        * mut u8, arg2 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_method_crud_api_read_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::CrudApi > (arg0, arg1, arg2) } }
                        #[unsafe (export_name =
                        "cabi_post_taho:models/crud#[method]crud-api.read")] unsafe
                        extern "C" fn _post_return_method_crud_api_read(arg0 : * mut u8,)
                        { unsafe { $($path_to_types)*::
                        __post_return_method_crud_api_read::<<$ty as $($path_to_types)*::
                        Guest >::CrudApi > (arg0) } } #[unsafe (export_name =
                        "taho:models/crud#[method]crud-api.update")] unsafe extern "C" fn
                        export_method_crud_api_update(arg0 : * mut u8, arg1 : * mut u8,
                        arg2 : usize, arg3 : * mut u8, arg4 : usize,) -> * mut u8 {
                        unsafe { $($path_to_types)*::
                        _export_method_crud_api_update_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::CrudApi > (arg0, arg1, arg2, arg3,
                        arg4) } } #[unsafe (export_name =
                        "cabi_post_taho:models/crud#[method]crud-api.update")] unsafe
                        extern "C" fn _post_return_method_crud_api_update(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_method_crud_api_update::<<$ty as
                        $($path_to_types)*:: Guest >::CrudApi > (arg0) } } #[unsafe
                        (export_name = "taho:models/crud#[method]crud-api.delete")]
                        unsafe extern "C" fn export_method_crud_api_delete(arg0 : * mut
                        u8, arg1 : * mut u8, arg2 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_method_crud_api_delete_cabi::<<$ty
                        as $($path_to_types)*:: Guest >::CrudApi > (arg0, arg1, arg2) } }
                        #[unsafe (export_name =
                        "cabi_post_taho:models/crud#[method]crud-api.delete")] unsafe
                        extern "C" fn _post_return_method_crud_api_delete(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_method_crud_api_delete::<<$ty as
                        $($path_to_types)*:: Guest >::CrudApi > (arg0) } } const _ : () =
                        { #[doc(hidden)] #[unsafe (export_name =
                        "taho:models/crud#[dtor]crud-api")] #[allow(non_snake_case)]
                        unsafe extern "C" fn dtor(rep : * mut u8) { unsafe {
                        $($path_to_types)*:: CrudApi::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::CrudApi > (rep) } } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_taho_models_crud_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 4 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 4
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod subscriber {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Topic = _rt::String;
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Subscription {
                    handle: _rt::Resource<Subscription>,
                }
                type _SubscriptionRep<T> = Option<T>;
                impl Subscription {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Subscription`.
                    pub fn new<T: GuestSubscription>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _SubscriptionRep<T> = Some(val);
                        let ptr: *mut _SubscriptionRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestSubscription>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestSubscription>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestSubscription>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _SubscriptionRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestSubscription>(&self) -> *mut _SubscriptionRep<T> {
                        Subscription::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Subscription`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct SubscriptionBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Subscription>,
                }
                impl<'a> SubscriptionBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestSubscription>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _SubscriptionRep<T> {
                        Subscription::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Subscription {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]taho:models/subscriber"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-drop]subscription"]
                                fn drop(_: u32);
                            }
                            unsafe { drop(_handle) };
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_subscription_cabi<
                    T: GuestSubscription,
                >() -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = Subscription::new(T::new());
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_subscription_subscribe_cabi<
                    T: GuestSubscription,
                >(arg0: *mut u8) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::subscribe(
                        unsafe { SubscriptionBorrow::lift(arg0 as u32 as usize) }.get(),
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec3 = result0;
                    let len3 = vec3.len();
                    let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec3.len() * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result3 = if layout3.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout3);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec3.into_iter().enumerate() {
                        let base = result3
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let vec2 = (e.into_bytes()).into_boxed_slice();
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            ::core::mem::forget(vec2);
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len2;
                            *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    }
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
                    *ptr1.add(0).cast::<*mut u8>() = result3;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_subscription_subscribe<
                    T: GuestSubscription,
                >(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base4 = l0;
                    let len4 = l1;
                    for i in 0..len4 {
                        let base = base4
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                        }
                    }
                    _rt::cabi_dealloc(
                        base4,
                        len4 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_subscription_handle_event_cabi<
                    T: GuestSubscription,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let len1 = arg4;
                    T::handle_event(
                        unsafe { SubscriptionBorrow::lift(arg0 as u32 as usize) }.get(),
                        _rt::string_lift(bytes0),
                        _rt::Vec::from_raw_parts(arg3.cast(), len1, len1),
                    );
                }
                pub trait Guest {
                    type Subscription: GuestSubscription;
                }
                pub trait GuestSubscription: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]taho:models/subscriber"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-new]subscription"]
                                fn new(_: *mut u8) -> u32;
                            }
                            unsafe { new(val) }
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]taho:models/subscriber"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-rep]subscription"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    fn new() -> Self;
                    fn subscribe(&self) -> _rt::Vec<Topic>;
                    fn handle_event(
                        &self,
                        event: _rt::String,
                        message: _rt::Vec<u8>,
                    ) -> ();
                }
                #[doc(hidden)]
                macro_rules! __export_taho_models_subscriber_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "taho:models/subscriber#[constructor]subscription")] unsafe
                        extern "C" fn export_constructor_subscription() -> i32 { unsafe {
                        $($path_to_types)*:: _export_constructor_subscription_cabi::<<$ty
                        as $($path_to_types)*:: Guest >::Subscription > () } } #[unsafe
                        (export_name =
                        "taho:models/subscriber#[method]subscription.subscribe")] unsafe
                        extern "C" fn export_method_subscription_subscribe(arg0 : * mut
                        u8,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_method_subscription_subscribe_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Subscription > (arg0) } } #[unsafe
                        (export_name =
                        "cabi_post_taho:models/subscriber#[method]subscription.subscribe")]
                        unsafe extern "C" fn
                        _post_return_method_subscription_subscribe(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*::
                        __post_return_method_subscription_subscribe::<<$ty as
                        $($path_to_types)*:: Guest >::Subscription > (arg0) } } #[unsafe
                        (export_name =
                        "taho:models/subscriber#[method]subscription.handle-event")]
                        unsafe extern "C" fn export_method_subscription_handle_event(arg0
                        : * mut u8, arg1 : * mut u8, arg2 : usize, arg3 : * mut u8, arg4
                        : usize,) { unsafe { $($path_to_types)*::
                        _export_method_subscription_handle_event_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Subscription > (arg0, arg1, arg2,
                        arg3, arg4) } } const _ : () = { #[doc(hidden)] #[unsafe
                        (export_name = "taho:models/subscriber#[dtor]subscription")]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { unsafe { $($path_to_types)*:: Subscription::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::Subscription > (rep) } } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_taho_models_subscriber_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 2 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 2
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::alloc;
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::boxed::Box;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_models_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::taho::models::model::__export_taho_models_model_cabi!($ty with_types_in
        $($path_to_types_root)*:: exports::taho::models::model);
        $($path_to_types_root)*::
        exports::taho::models::model_data::__export_taho_models_model_data_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::taho::models::model_data);
        $($path_to_types_root)*::
        exports::taho::models::port::__export_taho_models_port_cabi!($ty with_types_in
        $($path_to_types_root)*:: exports::taho::models::port); $($path_to_types_root)*::
        exports::taho::models::crud::__export_taho_models_crud_cabi!($ty with_types_in
        $($path_to_types_root)*:: exports::taho::models::crud); $($path_to_types_root)*::
        exports::taho::models::subscriber::__export_taho_models_subscriber_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::taho::models::subscriber);
    };
}
#[doc(inline)]
pub(crate) use __export_models_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:taho:models:models:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1970] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xb5\x0e\x01A\x02\x01\
A\x0c\x01B%\x01s\x04\0\x0amodel-name\x03\0\0\x01s\x04\0\x0cadapter-name\x03\0\x02\
\x01s\x04\0\x0bdomain-name\x03\0\x04\x01s\x04\0\x09port-name\x03\0\x06\x01s\x04\0\
\x0drelation-name\x03\0\x08\x01s\x04\0\x0dworkflow-name\x03\0\x0a\x01s\x04\0\x0f\
datasource-name\x03\0\x0c\x01r\x03\x04names\x04wfid\x0b\x07wfstates\x04\0\x0apor\
t-event\x03\0\x0e\x01m\x02\x07inbound\x08outbound\x04\0\x09direction\x03\0\x10\x01\
p\x03\x01p\x0f\x01r\x0d\x04name\x07\x08adapters\x12\x09direction\x11\x08consumes\
\x13\x08produces\x13\x08callback\x07\x07enabled\x7f\x07timeoutz\x05retryz\x08int\
ervalz\x0fcircuit-breaker\x7f\x06retestz\x04undo\x07\x04\0\x04port\x03\0\x14\x01\
m\x04\x0bone-to-many\x0bmany-to-one\x0aone-to-one\x0cmany-to-many\x04\0\x0dcardi\
nalities\x03\0\x16\x01r\x08\x04name\x09\x06domain\x05\x0drelated-model\x01\x0bca\
rdinality\x17\x0bforeign-keys\x0alocal-only\x7f\x0bkeep-remote\x7f\x04descs\x04\0\
\x08relation\x03\0\x18\x01r\x02\x04name\x0d\x06schemas\x04\0\x0adatasource\x03\0\
\x1a\x01p\x15\x01p\x19\x01r\x06\x04name\x01\x06domain\x05\x05ports\x1c\x09relati\
ons\x1d\x0adatasource\x1b\x0dcache-enabled\x7f\x04\0\x0amodel-spec\x03\0\x1e\x01\
q\x02\x0espec-not-found\x01s\0\x0cspec-invalid\x01s\0\x04\0\x0aspec-error\x03\0\x20\
\x01j\x01\x1f\x01!\x01@\0\0\"\x04\0\x08get-spec\x01#\x04\0\x11taho:models/model\x05\
\0\x02\x03\0\0\x0amodel-name\x02\x03\0\0\x0bdomain-name\x01B\x09\x02\x03\x02\x01\
\x01\x04\0\x0amodel-name\x03\0\0\x02\x03\x02\x01\x02\x04\0\x0bdomain-name\x03\0\x02\
\x01q\x0a\x07u8-type\x01}\0\x08u16-type\x01{\0\x08u32-type\x01y\0\x08u64-type\x01\
w\0\x07s8-type\x01~\0\x08s16-type\x01|\0\x08s32-type\x01z\0\x08s64-type\x01x\0\x09\
char-type\x01t\0\x0bstring-type\x01s\0\x04\0\x09primitive\x03\0\x04\x01p}\x01r\x04\
\x04uuids\x05model\x01\x06domain\x03\x04data\x06\x04\0\x0emodel-instance\x03\0\x07\
\x04\0\x16taho:models/model-data\x05\x03\x01B\x0e\x01q\x01\x05error\x01s\0\x04\0\
\x0aport-error\x03\0\0\x01p}\x01ps\x01r\x04\x04data\x02\x04wfids\x07wfstates\x06\
wfhist\x03\x04\0\x09port-data\x03\0\x04\x04\0\x05ports\x03\x01\x01i\x06\x01@\0\0\
\x07\x04\0\x12[constructor]ports\x01\x08\x01h\x06\x01j\x01\x05\x01\x01\x01@\x03\x04\
self\x09\x04names\x04data\x05\0\x0a\x04\0\x19[method]ports.invoke-port\x01\x0b\x04\
\0\x10taho:models/port\x05\x04\x01B\x16\x01o\x02ss\x01p\0\x01k\x01\x04\0\x09key-\
value\x03\0\x02\x01q\x01\x05error\x01s\0\x04\0\x0acrud-error\x03\0\x04\x04\0\x08\
crud-api\x03\x01\x01i\x06\x01@\x01\x06config\x03\0\x07\x04\0\x15[constructor]cru\
d-api\x01\x08\x01h\x06\x01p}\x01j\x01\x0a\x01\x05\x01@\x03\x04self\x09\x05querys\
\x04data\x0a\0\x0b\x04\0\x17[method]crud-api.create\x01\x0c\x01@\x02\x04self\x09\
\x05querys\0\x0b\x04\0\x15[method]crud-api.read\x01\x0d\x01j\x01z\x01\x05\x01@\x03\
\x04self\x09\x05querys\x04data\x0a\0\x0e\x04\0\x17[method]crud-api.update\x01\x0f\
\x01@\x02\x04self\x09\x05querys\0\x0e\x04\0\x17[method]crud-api.delete\x01\x10\x04\
\0\x10taho:models/crud\x05\x05\x01B\x0d\x01s\x04\0\x05topic\x03\0\0\x04\0\x0csub\
scription\x03\x01\x01i\x02\x01@\0\0\x03\x04\0\x19[constructor]subscription\x01\x04\
\x01h\x02\x01p\x01\x01@\x01\x04self\x05\0\x06\x04\0\x1e[method]subscription.subs\
cribe\x01\x07\x01p}\x01@\x03\x04self\x05\x05events\x07message\x08\x01\0\x04\0![m\
ethod]subscription.handle-event\x01\x09\x04\0\x16taho:models/subscriber\x05\x06\x04\
\0\x12taho:models/models\x04\0\x0b\x0c\x01\0\x06models\x03\0\0\0G\x09producers\x01\
\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
